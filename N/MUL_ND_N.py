# Двойникова Валерия Алексеевна, гр. 4381.

# -----------------------------------------------------------------------------
# Основная функция
# -----------------------------------------------------------------------------

def MUL_ND_N_f(num, k):
    """
    *** Умножение натурального числа на цифру ***
    num — словарь с ключом 'a': список цифр числа (list[int]), старшая к младшей
    k — цифра, на которую нужно умножить (int 0–9)
    Возврат — новое число того же формата (dict)
    raise ValueError — если число неверное или k не цифра
    """
    check_natural_number(num)  # сначала проверка числа
    check_digit(k)                                       # проверка множителя

    a = num['a'][:]      # копируем список цифр
    a = turn_number(a)  # разворачиваем, чтобы идти с младшего разряда

    result = []
    carry = 0

    for digit in a:
        total = digit * k + carry  # умножаем текущую цифру (!!!) на k и прибавляем перенос с предыдущего разряда
        result.append(total % 10)
        carry = total // 10        # всё, что "переполнено" (десятки и выше), переносим на следующий разряд

    if carry:
        result.append(carry)

    result = turn_number(result)  # разворачиваем обратно
    return {'a': result}           # добавляем остаток переноса как старшую цифру

# -----------------------------------------------------------------------------
# Вспомогательные функции
# -----------------------------------------------------------------------------

def turn_number(a):
    """
    Разворот списка цифр числа
    a — список цифр (list[int])
    Возвращает перевёрнутый список
    """
    return a[::-1]

def check_digit(d):
    """
    Проверка, что значение является цифрой 0–9
    d — значение для проверки
    raise ValueError, если не цифра
    """
    if not isinstance(d, int) or not (0 <= d <= 9):
        raise ValueError(f"{d} должно быть цифрой от 0 до 9")

def check_natural_number(num):
    """Проверка, что число натуральное"""
    if not isinstance(num, dict):
        raise ValueError("число должно быть словарём")
    a = num.get('a')
    if not isinstance(a, list) or len(a) == 0:
        raise ValueError("*a* должно быть непустым списком") # TODO: изменить описание ошибки при вводе в UI, т.к будет строка?
    if not all(isinstance(d, int) and 0 <= d <= 9 for d in a):
        raise ValueError("все элементы списка a должны быть цифрами (0–9)")

